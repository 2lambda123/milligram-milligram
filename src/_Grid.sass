
// Grid
// ––––––––––––––––––––––––––––––––––––––––––––––––––

// .container is main centered wrapper with a max width of 1120rem (1120px)
.container
	margin: 0 auto
	max-width: 112.0rem
	padding: 0 2.0rem
	position: relative
	width: 100%

// Using flexbox for the grid, inspired by Philip Walton:
// http://philipwalton.github.io/solved-by-flexbox/demos/grids/
// By default each .column within a .row will evenly take up
// available width, and the height of each .column with take
// up the height of the tallest .column in the same .row.
.row
	display: flex
	flex-direction: column
	width: 100%
	// Larger than mobile screen
	@media (min-width: 40.0rem)

		flex-direction: row
		margin-left: -1.0rem
		width: calc(100% + 2.0rem)

.row-wrap
	flex-wrap: wrap

.row-no-padding
	padding: 0

	&> .column
		padding: 0

// & + .row
// 	margin-top: -.5rem
// 	padding-top: 0

// Vertically Align Columns
// .row-* vertically aligns every .col in the .row
.row-top
	align-items: flex-start

.row-bottom
	align-items: flex-end

.row-center
	align-items: center

.row-stretch
	align-items: stretch

.row-baseline
	align-items: baseline

.column
	display: block
	flex: 1
	margin-left: 0
	max-width: 100%
	width: 100%
	// Larger than mobile screen
	@media (min-width: 40.0rem)
		padding: 0 1.0rem

// .column-* vertically aligns an individual .column
.col-top
	align-self: flex-start

.col-bottom
	align-self: flex-end

.col-center
	align-self: center

// Explicit Column Percent Sizes
// By default each grid column will evenly distribute
// across the grid. However, you can specify individual
// columns to take up a certain size of the available area

$column-sizes: (10: 10%, 20: 20%, 25: 25%, 33: 33.3333%, 34: 33.3333%, 40: 40%, 50: 50%, 60: 60%, 66: 66.6666%, 67: 66.6666%, 75: 75%, 80: 80%, 90: 90% )

@each $size-name, $size in $column-sizes

	.column-#{$size-name}
		flex: 0 0 $size
		max-width: $size

	.column-offset-#{$size-name}
		margin-left: $size
